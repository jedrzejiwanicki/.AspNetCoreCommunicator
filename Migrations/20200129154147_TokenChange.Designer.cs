// <auto-generated />
using System;
using Communicator.Db;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Communicator.Migrations
{
    [DbContext(typeof(CommunicatorContext))]
    [Migration("20200129154147_TokenChange")]
    partial class TokenChange
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Communicator.Db.Entities.Room", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("Rooms");

                    b.HasData(
                        new
                        {
                            Id = "default",
                            Name = "default"
                        });
                });

            modelBuilder.Entity("Communicator.Db.Entities.Token", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Tokens");
                });

            modelBuilder.Entity("Communicator.Db.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("ConnectedRoomId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("ConnectedRoomId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Communicator.Db.Entities.UserConnection", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("ConnectedUserId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("ConnectionId")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("ConnectedUserId")
                        .IsUnique();

                    b.ToTable("UserConnections");
                });

            modelBuilder.Entity("Communicator.Db.Entities.Token", b =>
                {
                    b.HasOne("Communicator.Db.Entities.User", "User")
                        .WithMany("Tokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Communicator.Db.Entities.User", b =>
                {
                    b.HasOne("Communicator.Db.Entities.Room", "ConnectedRoom")
                        .WithMany("ConnectedUsers")
                        .HasForeignKey("ConnectedRoomId");
                });

            modelBuilder.Entity("Communicator.Db.Entities.UserConnection", b =>
                {
                    b.HasOne("Communicator.Db.Entities.User", "ConnectedUser")
                        .WithOne("Connection")
                        .HasForeignKey("Communicator.Db.Entities.UserConnection", "ConnectedUserId");
                });
#pragma warning restore 612, 618
        }
    }
}
